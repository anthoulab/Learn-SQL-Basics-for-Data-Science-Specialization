-- Q2: Reformat the final_assignments_qa to look like the final_assignments table, filling in any missing values with a placeholder of the appropriate data type.

SELECT
  item_id,
  test_a AS test_assignment,
  (
    CASE
      WHEN test_a IS NOT NULL THEN 'item_test_1'
      ELSE NULL
    END
  ) AS test_number,
  (
    CASE
      WHEN test_a IS NOT NULL THEN '2013-01-05 00:00:00'
      ELSE NULL
    END
  ) AS test_start_date
FROM
  dsv1069.final_assignments_qa
UNION
SELECT
  item_id,
  test_b AS test_assignment,
  (
    CASE
      WHEN test_b IS NOT NULL THEN 'item_test_2'
      ELSE NULL
    END
  ) AS test_number,
  (
    CASE
      WHEN test_b IS NOT NULL THEN '2013-01-05 00:00:00'
      ELSE NULL
    END
  ) AS test_start_date
FROM
  dsv1069.final_assignments_qa
UNION
SELECT
  item_id,
  test_c AS test_assignment,
  (
    CASE
      WHEN test_c IS NOT NULL THEN 'item_test_3'
      ELSE NULL
    END
  ) AS test_number,
  (
    CASE
      WHEN test_c IS NOT NULL THEN '2013-01-05 00:00:00'
      ELSE NULL
    END
  ) AS test_start_date
FROM
  dsv1069.final_assignments_qa
UNION
SELECT
  item_id,
  test_d AS test_assignment,
  (
    CASE
      WHEN test_d IS NOT NULL THEN 'item_test_4'
      ELSE NULL
    END
  ) AS test_number,
  (
    CASE
      WHEN test_d IS NOT NULL THEN '2013-01-05 00:00:00'
      ELSE NULL
    END
  ) AS test_start_date
FROM
  dsv1069.final_assignments_qa
UNION
SELECT
  item_id,
  test_e AS test_assignment,
  (
    CASE
      WHEN test_e IS NOT NULL THEN 'item_test_5'
      ELSE NULL
    END
  ) AS test_number,
  (
    CASE
      WHEN test_e IS NOT NULL THEN '2013-01-05 00:00:00'
      ELSE NULL
    END
  ) AS test_start_date
FROM
  dsv1069.final_assignments_qa
UNION
SELECT
  item_id,
  test_f AS test_assignment,
  (
    CASE
      WHEN test_f IS NOT NULL THEN 'item_test_6'
      ELSE NULL
    END
  ) AS test_number,
  (
    CASE
      WHEN test_f IS NOT NULL THEN '2013-01-05 00:00:00'
      ELSE NULL
    END
  ) AS test_start_date
FROM
  dsv1069.final_assignments_qa



-- Q3: Use the final_assignments table to calculate the order binary for the 30 day window after the test assignment for item_test_2

SELECT
  test_assignment,
  COUNT(DISTINCT item_id) AS items,
  SUM(order_binary) AS items_30_days
FROM
  (
    SELECT
      test_events_2.item_id,
      test_events_2.test_assignment,
      test_events_2.test_number,
      test_events_2.test_start_date,
      test_events_2.created_at,
      MAX(
        CASE
          WHEN (
            created_at > test_start_date
            AND DATE_PART('day', created_at - test_start_date) <= 30
          ) THEN 1
          ELSE 0
        END
      ) AS order_binary
    FROM
      (
        SELECT
          fa.*,
          created_at,
          invoice_id
        FROM
          dsv1069.final_assignments AS fa
          LEFT JOIN dsv1069.orders AS o ON fa.item_id = o.item_id
        WHERE
          test_number = 'item_test_2'
      ) AS test_events_2
    GROUP BY
      test_events_2.item_id,
      test_events_2.test_assignment,
      test_events_2.test_number,
      test_events_2.test_start_date,
      test_events_2.created_at
  ) AS order_binary
GROUP BY
  test_assignment



-- Q4: Use the final_assignments table to calculate the view binary, and average views for the 30 day window after the test assignment for item_test_2.

SELECT
  final.test_assignment,
  COUNT(DISTINCT item_id) AS items,
  SUM(view_binary) AS views_30_days
FROM
  (
    SELECT
      item_test_2.item_id,
      item_test_2.test_assignment,
      item_test_2.test_number,
      MAX(
        CASE
          WHEN (
            view_date > test_start_date
            AND DATE_PART('day', view_date - test_start_date) <= 30
          ) THEN 1
          ELSE 0
        END
      ) AS view_binary
    FROM
      (
        SELECT
          final_assignments.*,
          DATE(EVENTS.event_time) AS view_date
        FROM
          dsv1069.final_assignments AS final_assignments
          LEFT JOIN (
            SELECT
              event_time,
              CASE
                WHEN parameter_name = 'item_id' THEN CAST(parameter_value AS NUMERIC)
                ELSE NULL
              END AS item_id
            FROM
              dsv1069.events
            WHERE
              event_name = 'view_item'
          ) AS EVENTS ON final_assignments.item_id = EVENTS.item_id
        WHERE
          test_number = 'item_test_2'
      ) AS item_test_2
    GROUP BY
      item_test_2.item_id,
      item_test_2.test_assignment,
      item_test_2.test_number
  ) AS final
GROUP BY
  final.test_assignment
